AFID: The Analytic Fast Ion Distribution Function utilities
 Developed by Josh Breslau, PPPL, 2010-2019

Introduction:

    The TRANSP neutral beam code NUBEAM computes the positions in state
space of an ensemble of beam ions at a particular time during a tokamak
shot. The purpose of the AFID utility is to compute the smooth analytic
function f(E,mu,P_phi) (where kinetic energy E, magnetic moment mu, and
canonical toroidal angular momentum P_phi are the constants of motion)
that best fits this discrete particle distribution.  A small library
of C- and Fortran-callable interface routines is then provided that
allows quick evaluation of the function f and its first derivatives
with respect to E and P_phi at arbitrary (E,mu,P_phi) locations for use
in delta-f stability calculations. To avoid ambiguity, separate
distributions are calculated for co- and counter-circulating ions.


The components of AFID are as follows:

 condense: Reads multi-CPU particle data from NUBEAM output files
           matching the pattern [jobid]_debug_nbi_ptcl_state_cpui_n.cdf
           and plasma state data from TRANSP output file
           [jobid]_ps_ts1_state.cdf, and consolidates the information
           into a single NetCDF file listing all particles'
           directions, weights, and constants-of-motion coordinates.

           Note: To ensure that these files are generated in a TRANSP/
                 NUBEAM run, be sure to include the variable FI_OUTTIM
                 in the TRANSP TR.DAT namelist; it should be set to
                 the same value as OUTTIM.

 mcgen: Performs a Monte-Carlo calculation to randomly generate a large
        ensemble of particles evenly distributed in physical and
        velocity space within the bounds determined by the NUBEAM
        distribution produced by "condense", which are then converted
        into constants-of-motion coordinates and stored in the same
        format as the condense output.  These are used to estimate the
        Jacobian to normalize the NUBEAM distribution properly. For
        the sake of smoothness, a large number of particles is
        recommended; the default is 16 million. This calculation can
        be time-consuming, but is faster if run on multiple cores.

 particle_sort: Sorts the particle lists in the NetCDF files generated
                by condense and mcgen by sign of velocity and then by
                increasing magnetic moment mu, and overwrites the files
                with the result. Files that have already been sorted
                are ignored. The sort is required for the binning and
                fitting calculations. Unsorted distributions provided
                to the binning code fitjac will be sorted by that code,
                but if multiple fit attempts are planned by the user,
                sorting in advance with particle_sort will save time.

 fitjac: Reads in the particle distribution files generated by the
         above utilities, divides them into subgroups by mu value, then
         bins each subgroup onto an (E,P_phi) grid, applies smoothing,
         normalizes the NUBEAM distribution by the Jacobian, fits a 2D
         cubic B-spline to the resulting histogram, and records the
         spline coefficients to two ascii files, pdist01.spl and
         pdist-1.spl. If the debug flag is set, this utility will also
         generate a series of "mucoarse" text files containing bin
         data that can later be compared with spline reconstructions
         for diagnostic purposes.

         fitjac provides a large number of user-settable runtime
         options to control the fitting parameters, which will be
         described below.

  afid.py: A python script provided for convenience that, if provided
           with a TRANSP job id, will automatically run the preceding
           codes in sequence using default settings to generate the
           spline files.

 testEsplines.f90: Not strictly a part of the AFID package, this code
                   illustrates the use of the Fortran interface to the
                   AFID library routines to evaluate the analytic
                   distribution function and its derivatives at
                   multiple locations given the spline coefficient
                   files.

                   The output file "mufine" can be visually compared
                   with the mucoarse debug output of fitjac mentioned
                   above using the IDL plotting procedure in
                   contours.pro.

 particleSplines.c: Defines the AFID library subroutines used for
                    function evaluation (see below).


Building

    To build the entire package, enter this directory on a PPPL cluster
node, type "source modules" to set up the proper module environment for
compilation, and then type "gmake all". The package relies on the
plasma_state library and its dependencies in the ntcc library to access
the NUBEAM data and interpolate fields at particle positions, and on
the GNU Scientific Library (gsl) for spline evaluation and
least-squares fitting. It also uses the NetCDF library (version 4 or
later) to read and write particle data.


Fitting options

    Run fitjac with no arguments to see this description of usage and
list of runtime options:

Usage: fitjac <fileroot> [options]

        Bins particle distribution data from <fileroot>_condensed.cdf,
        normalizes according to data in <fileroot>_jacobian.cdf, and fits
        splines in E and P_phi to a series of mu cross-sections.

Options:
        -log: fit splines to ln(f) rather than f itself.
        -minbins <min. # of bins in any direction> (default 7)
        -ppbin <particles/bin target> (default 40)
        -nmu <number of mu bins> (default 25), 0 to calculate based on ppbin
        -mueqw: specify equal-width mu bins (default: equal particle count)
        -ii: ignore isolated single-particle bins
        -sigma_p <particle bin gauss blur radius> (default 1.334)
        -sigma_j <Jacobian bin gauss blur radius> (default 1.750)
        -crat <ratio of coef count to bin count> (default 0.625)
        -mincoefs <min. # of spline coefs in any direction> (default 6)
        -debug: generate debugging information, including mucoarse files.


AFID Library subroutines (Fortran 90 interface)

pspline_init(nmu_minus, nmu_plus)
  integer, intent(out) :: nmu_minus, nmu_plus

  Call this routine first to read the pdist*1.spl files and set up data
  structures for spline interpolation of particle distribution function
  values. The return values are the number of bins in mu for negative
  and positive toroidal velocity respectively.


pspline_set_order(iorder)
  integer, intent(in) :: iorder

  Call this routine to change the order of interpolation of the
  distribution function in the mu direction. Order 0 (nearest-neighbor)
  (default); and order 1 (linear interpolation) are currently
  supported. 0 is recommended.


getpspline3bounds(pmin, pmax, mumin, mumax, cmin, emax)
 real*8, intent(out) :: pmin, pmax, mumin, mumax, cmin, emax

  An inquiry routine that returns the overall bounds over which the
  entire analytic distribution function is defined. Note that c is
  here defined as E/mu, so that in a given mu bin, emin = cmin*mumin.


getpspline2bounds(mu, sgnv, pmin, pmax, cmin, emax)
  integer, intent(in) :: sgnv
  real*8, intent(in)  :: mu
  real*8, intent(out) :: pmin, pmax, cmin, emax

  An inquiry routine that returns the local Pphi and E bounds for the
  mu bin corresponding to the indicated (mu, sgnv) values.


getpdf(pphi, mu, ke, sgnv, f)
  real*8, intent(in)  :: pphi, mu, ke
  integer, intent(in) :: sgnv
  real*8, intent(out) :: f

  Once splines have been initialized, pass a set of constants of
  motion and sign(v) to this routine to evaluate the distribution
  function at that location.


getpdfd(pphi, mu, ke, sgnv, f, dfdp, dfdE)
  real*8, intent(in)  :: pphi, mu, ke
  integer, intent(in) :: sgnv
  real*8, intent(out) :: f, dfdp, dfdE

  Returns both the function and its first derivatives with respect to
  P_phi and E at the indicated location. If both derivatives are needed
  at the same location, this is more efficient than calling the two
  routines below.


getdfde(pphi, mu, ke, sgnv, f, dfdE)
  real*8, intent(in)  :: pphi, mu, ke
  integer, intent(in) :: sgnv
  real*8, intent(out) :: f, dfdE

  Returns both the function and its first derivative with respect to
  E at the indicated location. If df/dP_phi is not needed at this
  location, this is more efficient than calling getpdfd.


getdfdp(pphi, mu, ke, sgnv, f, dfdp)
  real*8, intent(in)  :: pphi, mu, ke
  integer, intent(in) :: sgnv
  real*8, intent(out) :: f, dfdp

  Returns both the function and its first derivative with respect to
  P_phi at the indicated location. If df/dE is not needed at this
  location, this is more efficient than calling getpdfd.


pspline_free

  Call this when finished with the spline routines to free memory
  associated with the spline data.
